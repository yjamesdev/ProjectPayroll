import {
  require_react_dom
} from "./chunk-GYWC62UC.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  __commonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../node_modules/classnames/index.js
var require_classnames = __commonJS({
  "../node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// ../node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object2) {
          return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has3 = require_has();
      printWarning = function(text) {
        var message2 = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message2);
        }
        try {
          throw new Error(message2);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has3;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has3(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has3 = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message2 = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message2);
        }
        try {
          throw new Error(message2);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message2, data) {
        this.message = message2;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has3(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has3(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has3(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../node_modules/invariant/browser.js
var require_browser = __commonJS({
  "../node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant3 = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant3;
  }
});

// ../node_modules/react-widgets/esm/Combobox.js
var import_classnames11 = __toESM(require_classnames());
var PropTypes9 = __toESM(require_prop_types());
var React17 = __toESM(require_react());
var import_react35 = __toESM(require_react());

// ../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  for (var key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
  }
  return target;
}

// ../node_modules/uncontrollable/lib/esm/hook.js
var import_react = __toESM(require_react());

// ../node_modules/uncontrollable/lib/esm/utils.js
var import_invariant = __toESM(require_browser());

// ../node_modules/uncontrollable/lib/esm/hook.js
function useUncontrolledProp(propValue, defaultValue, handler) {
  var wasPropRef = (0, import_react.useRef)(propValue !== void 0);
  var _useState = (0, import_react.useState)(defaultValue), stateValue = _useState[0], setState = _useState[1];
  var isProp2 = propValue !== void 0;
  var wasProp = wasPropRef.current;
  wasPropRef.current = isProp2;
  if (!isProp2 && wasProp && stateValue !== defaultValue) {
    setState(defaultValue);
  }
  return [isProp2 ? propValue : stateValue, (0, import_react.useCallback)(function(value) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (handler)
      handler.apply(void 0, [value].concat(args));
    setState(value);
  }, [handler])];
}

// ../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// ../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

// ../node_modules/uncontrollable/lib/esm/uncontrollable.js
var import_react2 = __toESM(require_react());

// ../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== void 0) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== void 0 ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

// ../node_modules/uncontrollable/lib/esm/uncontrollable.js
var import_invariant2 = __toESM(require_browser());

// ../node_modules/react-widgets/esm/Icon.js
var React2 = __toESM(require_react());
var caretUp = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M288.66 352H31.34c-17.82 0-26.74-21.54-14.14-34.14L145.86 189.2a20 20 0 0 1 28.28 0L302.8 317.86c12.6 12.6 3.68 34.14-14.14 34.14z"
}));
var caretDown = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"
}));
var chevronRight = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M285.48 272.97L91.13 467.31a24 24 0 0 1-33.94 0l-22.67-22.66a24 24 0 0 1-.04-33.9L188.5 256 34.48 101.25a24 24 0 0 1 .04-33.9L57.2 44.7a24 24 0 0 1 33.94 0l194.35 194.34a24 24 0 0 1 0 33.94z"
}));
var chevronLeft = React2.createElement("svg", {
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 320 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M34.52 239.03L228.87 44.69a24 24 0 0 1 33.94 0l22.67 22.67a24 24 0 0 1 .04 33.9L131.49 256l154.02 154.75a24 24 0 0 1-.04 33.9l-22.67 22.67a24 24 0 0 1-33.94 0L34.52 272.97a24 24 0 0 1 0-33.94z"
}));
var calendar = React2.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 448 512",
  className: "rw-i-calendar",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"
}));
var clock = React2.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentcolor",
  viewBox: "0 0 512 512",
  className: "rw-i-clock",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6a12 12 0 0 1 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z"
}));
var times = React2.createElement("svg", {
  height: ".8em",
  fill: "currentcolor",
  viewBox: "0 0 352 512",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  d: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"
}));
var clear = React2.createElement("svg", {
  "aria-hidden": true,
  height: "1em",
  fill: "currentColor",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 512 512"
}, React2.createElement("path", {
  d: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm101.8-262.2L295.6 256l62.2 62.2c4.7 4.7 4.7 12.3 0 17l-22.6 22.6c-4.7 4.7-12.3 4.7-17 0L256 295.6l-62.2 62.2c-4.7 4.7-12.3 4.7-17 0l-22.6-22.6c-4.7-4.7-4.7-12.3 0-17l62.2-62.2-62.2-62.2c-4.7-4.7-4.7-12.3 0-17l22.6-22.6c4.7-4.7 12.3-4.7 17 0l62.2 62.2 62.2-62.2c4.7-4.7 12.3-4.7 17 0l22.6 22.6c4.7 4.7 4.7 12.3 0 17z"
}));
var Spinner = React2.createElement("svg", {
  height: "1.4em",
  viewBox: "0 0 50 50",
  xmlSpace: "preserve",
  "aria-hidden": "true",
  xmlns: "http://www.w3.org/2000/svg"
}, React2.createElement("path", {
  fill: "currentcolor",
  d: "M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z"
}, React2.createElement("animateTransform", {
  attributeType: "xml",
  attributeName: "transform",
  type: "rotate",
  from: "0 25 25",
  to: "360 25 25",
  dur: "0.6s",
  repeatCount: "indefinite"
})));

// ../node_modules/react-widgets/esm/Input.js
var import_classnames = __toESM(require_classnames());
var import_prop_types = __toESM(require_prop_types());
var import_react3 = __toESM(require_react());
var _excluded = ["className", "disabled", "readOnly", "value", "tabIndex", "type", "component"];
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Input = import_react3.default.forwardRef((_ref, ref) => {
  let {
    className,
    disabled: disabled2,
    readOnly,
    value,
    tabIndex,
    type = "text",
    component: Component = "input"
  } = _ref, props = _objectWithoutPropertiesLoose2(_ref, _excluded);
  return import_react3.default.createElement(Component, _extends2({}, props, {
    ref,
    type,
    tabIndex: tabIndex || 0,
    autoComplete: "off",
    disabled: disabled2,
    readOnly,
    "aria-disabled": disabled2,
    "aria-readonly": readOnly,
    value: value == null ? "" : value,
    className: (0, import_classnames.default)(className, "rw-input")
  }));
});
Input.displayName = "Input";
Input.propTypes = {
  disabled: import_prop_types.default.bool,
  readOnly: import_prop_types.default.bool,
  value: import_prop_types.default.string,
  type: import_prop_types.default.string,
  tabIndex: import_prop_types.default.number,
  component: import_prop_types.default.any
};
var Input_default = Input;

// ../node_modules/react-widgets/esm/List.js
var import_classnames4 = __toESM(require_classnames());
var import_prop_types4 = __toESM(require_prop_types());
var import_react20 = __toESM(require_react());

// ../node_modules/react-widgets/esm/ListOption.js
var import_classnames2 = __toESM(require_classnames());
var import_prop_types2 = __toESM(require_prop_types());
var import_react5 = __toESM(require_react());

// ../node_modules/dom-helpers/esm/querySelectorAll.js
var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);
function qsa(element, selector) {
  return toArray(element.querySelectorAll(selector));
}

// ../node_modules/react-widgets/esm/FocusListContext.js
var import_react4 = __toESM(require_react());
var FocusListContext = import_react4.default.createContext(null);
var defaultOpts = {
  behavior: "stop"
};
function useListOption(dataItem2) {
  const ctx = (0, import_react4.useContext)(FocusListContext);
  const prevElement = (0, import_react4.useRef)(null);
  const ref = (0, import_react4.useRef)(null);
  (0, import_react4.useLayoutEffect)(() => () => {
    ctx == null ? void 0 : ctx.map.delete(ref.current);
  }, []);
  (0, import_react4.useLayoutEffect)(() => {
    if (prevElement.current !== ref.current) {
      ctx == null ? void 0 : ctx.map.delete(prevElement.current);
    }
    prevElement.current = ref.current;
    if (ref.current && (ctx == null ? void 0 : ctx.map.get(ref.current)) !== dataItem2) {
      ctx == null ? void 0 : ctx.map.set(ref.current, dataItem2);
    }
  });
  const focused = dataItem2 === (ctx == null ? void 0 : ctx.focusedItem);
  return [ref, focused, focused ? ctx == null ? void 0 : ctx.activeId : void 0];
}
var useFocusList = ({
  scope: listRef,
  anchorItem,
  focusFirstItem: _focusFirstItem = false,
  scopeSelector: _scopeSelector = "",
  activeId
}) => {
  const map = (0, import_react4.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
  const [focusedItem, setFocusedItem] = (0, import_react4.useState)();
  const itemSelector = `${_scopeSelector} [data-rw-focusable]`.trim();
  const get = () => {
    const items = qsa(listRef.current, itemSelector);
    return [items, items.find((e) => e.dataset.rwFocused === "")];
  };
  const list = (0, import_react4.useMemo)(() => {
    return {
      size() {
        const [items] = get();
        return items.length;
      },
      get,
      toDataItem: (el) => map.get(el),
      first() {
        const [[first]] = get();
        return first;
      },
      focus(el) {
        if (!el || map.has(el))
          setFocusedItem(el ? map.get(el) : void 0);
      },
      last() {
        const [items] = get();
        return items[items.length - 1];
      },
      next({
        behavior
      } = defaultOpts) {
        const [items, focusedItem2] = get();
        let nextIdx = items.indexOf(focusedItem2) + 1;
        if (nextIdx >= items.length) {
          if (behavior === "loop")
            return items[0];
          if (behavior === "clear")
            return void 0;
          return focusedItem2;
        }
        return items[nextIdx];
      },
      prev({
        behavior
      } = defaultOpts) {
        const [items, focusedItem2] = get();
        let nextIdx = Math.max(0, items.indexOf(focusedItem2)) - 1;
        if (nextIdx < 0) {
          if (behavior === "loop")
            return items[items.length - 1];
          if (behavior === "clear")
            return void 0;
          return focusedItem2;
        }
        return items[nextIdx];
      }
    };
  }, []);
  (0, import_react4.useLayoutEffect)(() => {
    if (!anchorItem) {
      list.focus(null);
      return;
    }
    const element = get()[0].find((el) => list.toDataItem(el) === anchorItem);
    list.focus(element);
  }, [anchorItem]);
  (0, import_react4.useLayoutEffect)(() => {
    if (!listRef.current)
      return;
    const [, focusedElement] = get();
    const hasItem = focusedElement != null;
    if (!hasItem && _focusFirstItem || hasItem && !listRef.current.contains(focusedElement)) {
      if (_focusFirstItem)
        list.focus(list.first());
      else
        list.focus(null);
    }
  });
  const context = (0, import_react4.useMemo)(() => ({
    map,
    focusedItem,
    activeId
  }), [focusedItem, activeId]);
  list.context = context;
  list.getFocused = (0, import_react4.useCallback)(() => focusedItem, [focusedItem]);
  list.hasFocused = () => focusedItem !== void 0;
  return list;
};

// ../node_modules/react-widgets/esm/ListOption.js
var _excluded2 = ["className", "children", "dataItem", "selected", "disabled", "onSelect", "searchTerm"];
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var propTypes = {
  activeId: import_prop_types2.default.string,
  dataItem: import_prop_types2.default.any,
  selected: import_prop_types2.default.bool.isRequired,
  onSelect: import_prop_types2.default.func.isRequired,
  component: import_prop_types2.default.any
};
function ListOption(_ref) {
  let {
    className,
    children,
    dataItem: dataItem2,
    selected,
    disabled: disabled2,
    onSelect
  } = _ref, props = _objectWithoutPropertiesLoose3(_ref, _excluded2);
  const [ref, focused, id] = useListOption(dataItem2);
  const handleSelect = (event) => {
    if (onSelect && !disabled2)
      onSelect(dataItem2, event);
  };
  let classes = {
    "rw-state-focus": focused,
    "rw-state-selected": selected,
    "rw-state-disabled": disabled2
  };
  return import_react5.default.createElement("div", _extends3({
    id,
    ref,
    role: "option",
    "data-rw-option": "",
    "data-rw-focused": focused ? "" : void 0,
    "data-rw-focusable": !disabled2 ? "" : void 0,
    tabIndex: -1,
    "aria-selected": !!selected,
    className: (0, import_classnames2.default)("rw-list-option", className, classes),
    onClick: handleSelect
  }, props), children);
}
ListOption.propTypes = propTypes;
var ListOption_default = ListOption;

// ../node_modules/react-widgets/esm/ListOptionGroup.js
var import_classnames3 = __toESM(require_classnames());
var import_prop_types3 = __toESM(require_prop_types());
var import_react6 = __toESM(require_react());
var propTypes2 = {
  className: import_prop_types3.default.string,
  component: import_prop_types3.default.string
};
function ListOptionGroup({
  children,
  className,
  component = "div"
}) {
  let Tag = component;
  return import_react6.default.createElement(Tag, {
    tabIndex: "-1",
    role: "separator",
    className: (0, import_classnames3.default)(className, "rw-list-optgroup")
  }, children);
}
ListOptionGroup.propTypes = propTypes2;
var ListOptionGroup_default = ListOptionGroup;

// ../node_modules/react-widgets/esm/messages.js
var React7 = __toESM(require_react());
var import_react7 = __toESM(require_react());
var messages = {
  moveToday: "Today",
  moveBack: "Navigate back",
  moveForward: "Navigate forward",
  dateButton: "Select date",
  openCombobox: "open combobox",
  emptyList: "There are no items in this list",
  emptyFilter: "The filter returned no results",
  createOption: (_value, searchTerm) => [" Create option", searchTerm && " ", searchTerm && React7.createElement("strong", {
    key: "_"
  }, `"${searchTerm}"`)],
  tagsLabel: "Selected items",
  removeLabel: "Remove selected item",
  noneSelected: "no selected items",
  selectedItems: (labels) => `Selected items: ${labels.join(", ")}`,
  // number
  increment: "Increment value",
  decrement: "Decrement value"
};
var DEFAULTS = {};
function getMessages(defaults = DEFAULTS) {
  let processed = {};
  Object.keys(messages).forEach((message2) => {
    let value = defaults[message2];
    if (value == null)
      value = messages[message2];
    processed[message2] = typeof value === "function" ? value : () => value;
  });
  return processed;
}
var useMessagesWithDefaults = (defaults) => (0, import_react7.useMemo)(() => getMessages(defaults), [defaults]);

// ../node_modules/react-widgets/esm/PropTypes.js
var PropTypes4 = __toESM(require_prop_types());
var disabled = Object.assign((...args) => PropTypes4.bool(...args), {
  acceptsArray: PropTypes4.oneOfType([PropTypes4.bool, PropTypes4.array])
});
var accessor = PropTypes4.oneOfType([PropTypes4.string, PropTypes4.func]);
var message = PropTypes4.oneOfType([PropTypes4.node, PropTypes4.string, PropTypes4.func]);

// ../node_modules/tiny-warning/dist/tiny-warning.esm.js
var isProduction = false;
function warning(condition, message2) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message2;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {
    }
  }
}
var tiny_warning_esm_default = warning;

// ../node_modules/react-widgets/esm/_.js
function toItemArray(a) {
  if (Array.isArray(a))
    return a;
  return [];
}
var makeArray = (obj, excludeNull = true) => {
  const result = [];
  return excludeNull ? obj == null ? result : result.concat(obj) : result.concat(obj);
};
var has = (o, key) => o ? Object.prototype.hasOwnProperty.call(o, key) : false;
function groupBySortedKeys(groupBy, data, _keys = []) {
  const iter = typeof groupBy === "function" ? groupBy : (item) => item[groupBy];
  tiny_warning_esm_default(typeof groupBy !== "string" || !data.length || has(data[0], groupBy), `[React Widgets] You seem to be trying to group this list by a property \`${groupBy}\` that doesn't exist in the dataset items, this may be a typo`);
  const groups = /* @__PURE__ */ new Map();
  data.forEach((item) => {
    let group = iter(item);
    if (groups.has(group))
      groups.get(group).push(item);
    else
      groups.set(group, [item]);
  });
  return Array.from(groups);
}

// ../node_modules/react-widgets/esm/WidgetHelpers.js
var import_react8 = __toESM(require_react());
var idCount = 0;
function uniqueId(prefix) {
  return "" + ((prefix == null ? "" : prefix) + ++idCount);
}
function notify(handler, args) {
  if (handler)
    handler.apply(null, args);
}
var useInstanceId = (otherId, suffix = "") => {
  const id = (0, import_react8.useRef)();
  if (!id.current)
    id.current = uniqueId("rw_");
  return (otherId || id.current) + suffix;
};
function useFirstFocusedRender(focused, open) {
  const ref = (0, import_react8.useRef)(false);
  return ref.current || (focused || !!open) && (ref.current = true);
}

// ../node_modules/@restart/hooks/esm/useCustomEffect.js
var import_react10 = __toESM(require_react());

// ../node_modules/@restart/hooks/esm/useMounted.js
var import_react9 = __toESM(require_react());
function useMounted() {
  const mounted = (0, import_react9.useRef)(true);
  const isMounted = (0, import_react9.useRef)(() => mounted.current);
  (0, import_react9.useEffect)(() => {
    mounted.current = true;
    return () => {
      mounted.current = false;
    };
  }, []);
  return isMounted.current;
}

// ../node_modules/@restart/hooks/esm/useCustomEffect.js
function useCustomEffect(effect, dependencies, isEqualOrOptions) {
  const isMounted = useMounted();
  const {
    isEqual: isEqual2,
    effectHook = import_react10.useEffect
  } = typeof isEqualOrOptions === "function" ? {
    isEqual: isEqualOrOptions
  } : isEqualOrOptions;
  const dependenciesRef = (0, import_react10.useRef)();
  dependenciesRef.current = dependencies;
  const cleanupRef = (0, import_react10.useRef)(null);
  effectHook(() => {
    if (cleanupRef.current === null) {
      const cleanup = effect();
      cleanupRef.current = () => {
        if (isMounted() && isEqual2(dependenciesRef.current, dependencies)) {
          return;
        }
        cleanupRef.current = null;
        if (cleanup)
          cleanup();
      };
    }
    return cleanupRef.current;
  });
  (0, import_react10.useDebugValue)(effect);
}
var useCustomEffect_default = useCustomEffect;

// ../node_modules/dequal/dist/index.mjs
var has2 = Object.prototype.hasOwnProperty;
function find(iter, tar, key) {
  for (key of iter.keys()) {
    if (dequal(key, tar))
      return key;
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp;
  if (foo === bar)
    return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date)
      return foo.getTime() === bar.getTime();
    if (ctor === RegExp)
      return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]))
          ;
      }
      return len === -1;
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len;
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!bar.has(tmp))
          return false;
      }
      return true;
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len[0];
        if (tmp && typeof tmp === "object") {
          tmp = find(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false;
        }
      }
      return true;
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo);
      bar = new Uint8Array(bar);
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len))
          ;
      }
      return len === -1;
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len])
          ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has2.call(foo, ctor) && ++len && !has2.call(bar, ctor))
          return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
          return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}

// ../node_modules/@restart/hooks/esm/useUpdateImmediateEffect.js
var import_react14 = __toESM(require_react());

// ../node_modules/@restart/hooks/esm/useStableMemo.js
var import_react11 = __toESM(require_react());
function isEqual(a, b) {
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}
function useStableMemo(factory, deps) {
  let isValid = true;
  const valueRef = (0, import_react11.useRef)();
  if (!valueRef.current) {
    valueRef.current = {
      deps,
      result: factory()
    };
  } else {
    isValid = !!(deps && valueRef.current.deps && isEqual(deps, valueRef.current.deps));
  }
  const cache = isValid ? valueRef.current : {
    deps,
    result: factory()
  };
  valueRef.current = cache;
  return cache.result;
}

// ../node_modules/@restart/hooks/esm/useUpdatedRef.js
var import_react12 = __toESM(require_react());
function useUpdatedRef(value) {
  const valueRef = (0, import_react12.useRef)(value);
  valueRef.current = value;
  return valueRef;
}

// ../node_modules/@restart/hooks/esm/useWillUnmount.js
var import_react13 = __toESM(require_react());
function useWillUnmount(fn) {
  const onUnmount = useUpdatedRef(fn);
  (0, import_react13.useEffect)(() => () => onUnmount.current(), []);
}

// ../node_modules/@restart/hooks/esm/useUpdateImmediateEffect.js
function useUpdateImmediateEffect(effect, deps) {
  const firstRef = (0, import_react14.useRef)(true);
  const tearDown = (0, import_react14.useRef)();
  useWillUnmount(() => {
    if (tearDown.current)
      tearDown.current();
  });
  useStableMemo(() => {
    if (firstRef.current) {
      firstRef.current = false;
      return;
    }
    if (tearDown.current)
      tearDown.current();
    tearDown.current = effect();
  }, deps);
}
var useUpdateImmediateEffect_default = useUpdateImmediateEffect;

// ../node_modules/@restart/hooks/esm/useImmediateUpdateEffect.js
var useImmediateUpdateEffect_default = useUpdateImmediateEffect_default;

// ../node_modules/@restart/hooks/esm/useEventCallback.js
var import_react16 = __toESM(require_react());

// ../node_modules/@restart/hooks/esm/useCommittedRef.js
var import_react15 = __toESM(require_react());
function useCommittedRef(value) {
  const ref = (0, import_react15.useRef)(value);
  (0, import_react15.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref;
}
var useCommittedRef_default = useCommittedRef;

// ../node_modules/@restart/hooks/esm/useEventCallback.js
function useEventCallback(fn) {
  const ref = useCommittedRef_default(fn);
  return (0, import_react16.useCallback)(function(...args) {
    return ref.current && ref.current(...args);
  }, [ref]);
}

// ../node_modules/@restart/hooks/esm/useMutationObserver.js
var import_react17 = __toESM(require_react());
function isDepsEqual([nextElement, nextConfig], [prevElement, prevConfig]) {
  return nextElement === prevElement && dequal(nextConfig, prevConfig);
}
function useMutationObserver(element, config, callback) {
  const [records, setRecords] = (0, import_react17.useState)(null);
  const handler = useEventCallback(callback || setRecords);
  useCustomEffect_default(() => {
    if (!element)
      return;
    const observer = new MutationObserver(handler);
    observer.observe(element, config);
    return () => {
      observer.disconnect();
    };
  }, [element, config], {
    isEqual: isDepsEqual,
    // Intentionally done in render, otherwise observer will miss any
    // changes made to the DOM during this update
    effectHook: useImmediateUpdateEffect_default
  });
  return callback ? void 0 : records || [];
}
var useMutationObserver_default = useMutationObserver;

// ../node_modules/@restart/hooks/esm/useCallbackRef.js
var import_react18 = __toESM(require_react());
function useCallbackRef() {
  return (0, import_react18.useState)(null);
}

// ../node_modules/@restart/hooks/esm/useMergedRefs.js
var import_react19 = __toESM(require_react());
var toFnRef = (ref) => !ref || typeof ref === "function" ? ref : (value) => {
  ref.current = value;
};
function mergeRefs(refA, refB) {
  const a = toFnRef(refA);
  const b = toFnRef(refB);
  return (value) => {
    if (a)
      a(value);
    if (b)
      b(value);
  };
}
function useMergedRefs(refA, refB) {
  return (0, import_react19.useMemo)(() => mergeRefs(refA, refB), [refA, refB]);
}
var useMergedRefs_default = useMergedRefs;

// ../node_modules/react-widgets/esm/List.js
var _excluded3 = ["multiple", "data", "value", "onChange", "accessors", "className", "messages", "disabled", "renderItem", "renderGroup", "searchTerm", "groupBy", "elementRef", "optionComponent", "renderList"];
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var whitelist = ["style", "className", "role", "id", "autocomplete", "size", "tabIndex", "maxLength", "name"];
var whitelistRegex = [/^aria-/, /^data-/, /^on[A-Z]\w+/];
function pickElementProps(props) {
  const result = {};
  Object.keys(props).forEach((key) => {
    if (whitelist.indexOf(key) !== -1 || whitelistRegex.some((r) => !!key.match(r)))
      result[key] = props[key];
  });
  return result;
}
var propTypes3 = {
  data: import_prop_types4.default.array,
  dataKey: accessor,
  textField: accessor,
  onSelect: import_prop_types4.default.func,
  onMove: import_prop_types4.default.func,
  onHoverOption: import_prop_types4.default.func,
  optionComponent: import_prop_types4.default.elementType,
  renderItem: import_prop_types4.default.func,
  renderGroup: import_prop_types4.default.func,
  focusedItem: import_prop_types4.default.any,
  selectedItem: import_prop_types4.default.any,
  searchTerm: import_prop_types4.default.string,
  disabled: disabled.acceptsArray,
  messages: import_prop_types4.default.shape({
    emptyList: import_prop_types4.default.func.isRequired
  })
};
var useScrollFocusedIntoView = (element, observeChanges = false) => {
  const scrollIntoView = (0, import_react20.useCallback)(() => {
    if (!element)
      return;
    let selectedItem = element.querySelector("[data-rw-focused]");
    if (selectedItem && selectedItem.scrollIntoView) {
      selectedItem.scrollIntoView({
        block: "nearest",
        inline: "nearest"
      });
    }
  }, [element]);
  useMutationObserver_default(observeChanges ? element : null, {
    subtree: true,
    attributes: true,
    attributeFilter: ["data-rw-focused"]
  }, scrollIntoView);
  return scrollIntoView;
};
function useHandleSelect(multiple, dataItems, onChange) {
  return (dataItem2, event) => {
    if (multiple === false) {
      onChange(dataItem2, {
        dataItem: dataItem2,
        lastValue: dataItems[0],
        originalEvent: event
      });
      return;
    }
    const checked = dataItems.includes(dataItem2);
    onChange(checked ? dataItems.filter((d) => d !== dataItem2) : [...dataItems, dataItem2], {
      dataItem: dataItem2,
      lastValue: dataItems,
      action: checked ? "remove" : "insert",
      originalEvent: event
    });
  };
}
var List = import_react20.default.forwardRef(function List2(_ref, outerRef) {
  var _elementProps$role;
  let {
    multiple = false,
    data = [],
    value,
    onChange,
    accessors,
    className,
    messages: messages2,
    disabled: disabled2,
    renderItem,
    renderGroup,
    searchTerm,
    groupBy,
    elementRef,
    optionComponent: Option = ListOption_default,
    renderList
  } = _ref, props = _objectWithoutPropertiesLoose4(_ref, _excluded3);
  const id = useInstanceId();
  const dataItems = makeArray(value, multiple);
  const groupedData = (0, import_react20.useMemo)(() => groupBy ? groupBySortedKeys(groupBy, data) : void 0, [data, groupBy]);
  const [element, ref] = useCallbackRef();
  const disabledItems = toItemArray(disabled2);
  const {
    emptyList
  } = useMessagesWithDefaults(messages2);
  const divRef = useMergedRefs_default(ref, elementRef);
  const handleSelect = useHandleSelect(multiple, dataItems, onChange);
  const scrollIntoView = useScrollFocusedIntoView(element, true);
  let elementProps = pickElementProps(props);
  (0, import_react20.useImperativeHandle)(outerRef, () => ({
    scrollIntoView
  }), [scrollIntoView]);
  function renderOption(item, idx) {
    const textValue = accessors.text(item);
    const itemIsDisabled = disabledItems.includes(item);
    const itemIsSelected = dataItems.includes(item);
    return import_react20.default.createElement(Option, {
      dataItem: item,
      key: `item_${idx}`,
      searchTerm,
      onSelect: handleSelect,
      disabled: itemIsDisabled,
      selected: itemIsSelected
    }, renderItem ? renderItem({
      item,
      searchTerm,
      index: idx,
      text: textValue,
      // TODO: probably remove
      value: accessors.value(item),
      disabled: itemIsDisabled
    }) : textValue);
  }
  const items = groupedData ? groupedData.map(([group, items2], idx) => import_react20.default.createElement("div", {
    role: "group",
    key: `group_${idx}`
  }, import_react20.default.createElement(ListOptionGroup_default, null, renderGroup ? renderGroup({
    group
  }) : group), items2.map(renderOption))) : data.map(renderOption);
  const rootProps = Object.assign({
    id,
    tabIndex: 0,
    ref: divRef
  }, elementProps, {
    "aria-multiselectable": !!multiple,
    className: (0, import_classnames4.default)(className, "rw-list"),
    role: (_elementProps$role = elementProps.role) != null ? _elementProps$role : "listbox",
    children: import_react20.default.Children.count(items) ? items : import_react20.default.createElement("div", {
      className: "rw-list-empty"
    }, emptyList())
  });
  return renderList ? renderList(rootProps) : import_react20.default.createElement("div", rootProps);
});
List.displayName = "List";
List.propTypes = propTypes3;
var List_default = List;

// ../node_modules/react-widgets/esm/Popup.js
var import_classnames6 = __toESM(require_classnames());
var import_react24 = __toESM(require_react());

// ../node_modules/react-widgets/esm/SlideDownTransition.js
var import_classnames5 = __toESM(require_classnames());

// ../node_modules/dom-helpers/esm/ownerDocument.js
function ownerDocument(node3) {
  return node3 && node3.ownerDocument || document;
}

// ../node_modules/dom-helpers/esm/ownerWindow.js
function ownerWindow(node3) {
  var doc = ownerDocument(node3);
  return doc && doc.defaultView || window;
}

// ../node_modules/dom-helpers/esm/getComputedStyle.js
function getComputedStyle(node3, psuedoElement) {
  return ownerWindow(node3).getComputedStyle(node3, psuedoElement);
}

// ../node_modules/dom-helpers/esm/hyphenate.js
var rUpper = /([A-Z])/g;
function hyphenate(string3) {
  return string3.replace(rUpper, "-$1").toLowerCase();
}

// ../node_modules/dom-helpers/esm/hyphenateStyle.js
var msPattern = /^ms-/;
function hyphenateStyleName(string3) {
  return hyphenate(string3).replace(msPattern, "-ms-");
}

// ../node_modules/dom-helpers/esm/isTransform.js
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
function isTransform(value) {
  return !!(value && supportedTransforms.test(value));
}

// ../node_modules/dom-helpers/esm/css.js
function style(node3, property) {
  var css = "";
  var transforms = "";
  if (typeof property === "string") {
    return node3.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle(node3).getPropertyValue(hyphenateStyleName(property));
  }
  Object.keys(property).forEach(function(key) {
    var value = property[key];
    if (!value && value !== 0) {
      node3.style.removeProperty(hyphenateStyleName(key));
    } else if (isTransform(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += hyphenateStyleName(key) + ": " + value + ";";
    }
  });
  if (transforms) {
    css += "transform: " + transforms + ";";
  }
  node3.style.cssText += ";" + css;
}
var css_default = style;

// ../node_modules/dom-helpers/esm/isDocument.js
function isDocument(element) {
  return "nodeType" in element && element.nodeType === document.DOCUMENT_NODE;
}

// ../node_modules/dom-helpers/esm/isWindow.js
function isWindow(node3) {
  if ("window" in node3 && node3.window === node3)
    return node3;
  if (isDocument(node3))
    return node3.defaultView || false;
  return false;
}

// ../node_modules/dom-helpers/esm/contains.js
function contains(context, node3) {
  if (context.contains)
    return context.contains(node3);
  if (context.compareDocumentPosition)
    return context === node3 || !!(context.compareDocumentPosition(node3) & 16);
}

// ../node_modules/dom-helpers/esm/getScrollAccessor.js
function getscrollAccessor(offset2) {
  var prop = offset2 === "pageXOffset" ? "scrollLeft" : "scrollTop";
  function scrollAccessor(node3, val) {
    var win = isWindow(node3);
    if (val === void 0) {
      return win ? win[offset2] : node3[prop];
    }
    if (win) {
      win.scrollTo(win[offset2], val);
    } else {
      node3[prop] = val;
    }
  }
  return scrollAccessor;
}

// ../node_modules/dom-helpers/esm/scrollLeft.js
var scrollLeft_default = getscrollAccessor("pageXOffset");

// ../node_modules/dom-helpers/esm/scrollTop.js
var scrollTop_default = getscrollAccessor("pageYOffset");

// ../node_modules/dom-helpers/esm/offset.js
function offset(node3) {
  var doc = ownerDocument(node3);
  var box = {
    top: 0,
    left: 0,
    height: 0,
    width: 0
  };
  var docElem = doc && doc.documentElement;
  if (!docElem || !contains(docElem, node3))
    return box;
  if (node3.getBoundingClientRect !== void 0)
    box = node3.getBoundingClientRect();
  box = {
    top: box.top + scrollTop_default(docElem) - (docElem.clientTop || 0),
    left: box.left + scrollLeft_default(docElem) - (docElem.clientLeft || 0),
    width: box.width,
    height: box.height
  };
  return box;
}

// ../node_modules/dom-helpers/esm/height.js
function height(node3, client) {
  var win = isWindow(node3);
  return win ? win.innerHeight : client ? node3.clientHeight : offset(node3).height;
}

// ../node_modules/dom-helpers/esm/canUseDOM.js
var canUseDOM_default = !!(typeof window !== "undefined" && window.document && window.document.createElement);

// ../node_modules/dom-helpers/esm/addEventListener.js
var optionsSupported = false;
var onceSupported = false;
try {
  options = {
    get passive() {
      return optionsSupported = true;
    },
    get once() {
      return onceSupported = optionsSupported = true;
    }
  };
  if (canUseDOM_default) {
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, true);
  }
} catch (e) {
}
var options;
function addEventListener(node3, eventName, handler, options) {
  if (options && typeof options !== "boolean" && !onceSupported) {
    var once = options.once, capture = options.capture;
    var wrappedHandler = handler;
    if (!onceSupported && once) {
      wrappedHandler = handler.__once || function onceHandler(event) {
        this.removeEventListener(eventName, onceHandler, capture);
        handler.call(this, event);
      };
      handler.__once = wrappedHandler;
    }
    node3.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);
  }
  node3.addEventListener(eventName, handler, options);
}
var addEventListener_default = addEventListener;

// ../node_modules/dom-helpers/esm/removeEventListener.js
function removeEventListener(node3, eventName, handler, options) {
  var capture = options && typeof options !== "boolean" ? options.capture : options;
  node3.removeEventListener(eventName, handler, capture);
  if (handler.__once) {
    node3.removeEventListener(eventName, handler.__once, capture);
  }
}
var removeEventListener_default = removeEventListener;

// ../node_modules/dom-helpers/esm/listen.js
function listen(node3, eventName, handler, options) {
  addEventListener_default(node3, eventName, handler, options);
  return function() {
    removeEventListener_default(node3, eventName, handler, options);
  };
}
var listen_default = listen;

// ../node_modules/dom-helpers/esm/triggerEvent.js
function triggerEvent(node3, eventName, bubbles, cancelable) {
  if (bubbles === void 0) {
    bubbles = false;
  }
  if (cancelable === void 0) {
    cancelable = true;
  }
  if (node3) {
    var event = document.createEvent("HTMLEvents");
    event.initEvent(eventName, bubbles, cancelable);
    node3.dispatchEvent(event);
  }
}

// ../node_modules/dom-helpers/esm/transitionEnd.js
function parseDuration(node3) {
  var str = css_default(node3, "transitionDuration") || "";
  var mult = str.indexOf("ms") === -1 ? 1e3 : 1;
  return parseFloat(str) * mult;
}
function emulateTransitionEnd(element, duration, padding) {
  if (padding === void 0) {
    padding = 5;
  }
  var called = false;
  var handle = setTimeout(function() {
    if (!called)
      triggerEvent(element, "transitionend", true);
  }, duration + padding);
  var remove = listen_default(element, "transitionend", function() {
    called = true;
  }, {
    once: true
  });
  return function() {
    clearTimeout(handle);
    remove();
  };
}
function transitionEnd(element, handler, duration, padding) {
  if (duration == null)
    duration = parseDuration(element) || 0;
  var removeEmulate = emulateTransitionEnd(element, duration, padding);
  var remove = listen_default(element, "transitionend", handler);
  return function() {
    removeEmulate();
    remove();
  };
}

// ../node_modules/react-widgets/esm/SlideDownTransition.js
var import_prop_types7 = __toESM(require_prop_types());
var import_react23 = __toESM(require_react());

// ../node_modules/react-transition-group/esm/Transition.js
var import_prop_types6 = __toESM(require_prop_types());
var import_react22 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// ../node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// ../node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types5 = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.shape({
  enter: import_prop_types5.default.number,
  exit: import_prop_types5.default.number,
  appear: import_prop_types5.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.shape({
  enter: import_prop_types5.default.string,
  exit: import_prop_types5.default.string,
  active: import_prop_types5.default.string
}), import_prop_types5.default.shape({
  enter: import_prop_types5.default.string,
  enterDone: import_prop_types5.default.string,
  enterActive: import_prop_types5.default.string,
  exit: import_prop_types5.default.string,
  exitDone: import_prop_types5.default.string,
  exitActive: import_prop_types5.default.string
})]) : null;

// ../node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react21 = __toESM(require_react());
var TransitionGroupContext_default = import_react21.default.createContext(null);

// ../node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node3) {
  return node3.scrollTop;
};

// ../node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node3 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          if (node3)
            forceReflow(node3);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node3 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node3 || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node3, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      import_react22.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : import_react22.default.cloneElement(import_react22.default.Children.only(children), childProps))
    );
  };
  return Transition2;
}(import_react22.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types6.default.shape({
    current: typeof Element === "undefined" ? import_prop_types6.default.any : function(propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return import_prop_types6.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types6.default.oneOfType([import_prop_types6.default.func.isRequired, import_prop_types6.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types6.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types6.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types6.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types6.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types6.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types6.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener)
      pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types6.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types6.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types6.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types6.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types6.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types6.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types6.default.func
} : {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// ../node_modules/react-widgets/esm/SlideDownTransition.js
var _excluded4 = ["children", "className", "dropUp"];
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var transitionClasses = {
  [ENTERING]: "rw-slide-transition-entering",
  [EXITING]: "rw-slide-transition-exiting",
  [EXITED]: "rw-slide-transition-exited"
};
var SlideDownTransition = class extends import_react23.default.Component {
  constructor(...args) {
    super(...args);
    this.setContainerHeight = (elem) => {
      elem.style.height = this.getHeight(elem) + "px";
    };
    this.clearContainerHeight = (elem) => {
      elem.style.height = "";
    };
    this.handleEntered = (elem) => {
      this.clearContainerHeight(elem);
      if (this.props.onEntered)
        this.props.onEntered();
    };
    this.handleEntering = () => {
      if (this.props.onEntering)
        this.props.onEntering();
    };
    this.handleExit = (elem) => {
      this.setContainerHeight(elem);
      if (this.props.onExit)
        this.props.onExit();
    };
    this.handleExited = (elem) => {
      this.clearContainerHeight(elem);
      if (this.props.onExited)
        this.props.onExited();
    };
    this.handleTransitionEnd = (el, done) => {
      transitionEnd(el.firstChild, done);
    };
  }
  getHeight(container) {
    let content = container.firstChild;
    let margin = parseInt(css_default(content, "margin-top"), 10) + parseInt(css_default(content, "margin-bottom"), 10);
    let old = container.style.display;
    let height2;
    container.style.display = "block";
    height2 = (height(content) || 0) + (isNaN(margin) ? 0 : margin);
    container.style.display = old;
    return height2;
  }
  render() {
    const _this$props = this.props, {
      children,
      className,
      dropUp
    } = _this$props, props = _objectWithoutPropertiesLoose5(_this$props, _excluded4);
    return import_react23.default.createElement(Transition_default, _extends4({}, props, {
      appear: true,
      in: this.props.in,
      onEnter: this.setContainerHeight,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered,
      onExit: this.handleExit,
      onExited: this.handleExited,
      addEndListener: this.handleTransitionEnd,
      timeout: void 0
      /*hack*/
    }), (status, innerProps) => import_react23.default.createElement("div", _extends4({}, innerProps, {
      className: (0, import_classnames5.default)(className, dropUp && "rw-dropup", transitionClasses[status])
    }), import_react23.default.cloneElement(children, {
      className: (0, import_classnames5.default)("rw-slide-transition", children.props.className)
    })));
  }
};
SlideDownTransition.propTypes = {
  in: import_prop_types7.default.bool.isRequired,
  innerClassName: import_prop_types7.default.string,
  dropUp: import_prop_types7.default.bool,
  onExit: import_prop_types7.default.func,
  onExited: import_prop_types7.default.func,
  onEntering: import_prop_types7.default.func,
  onEntered: import_prop_types7.default.func
};
var SlideDownTransition_default = SlideDownTransition;

// ../node_modules/react-widgets/esm/Popup.js
var _excluded5 = ["id", "role", "dropUp", "className", "children", "open", "transition"];
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var StaticContainer = import_react24.default.memo(({
  children
}) => children, (_, {
  shouldUpdate
}) => !shouldUpdate);
var Popup = import_react24.default.forwardRef((_ref, ref) => {
  let {
    id,
    role,
    dropUp,
    className,
    children,
    open = false,
    transition = SlideDownTransition_default
  } = _ref, props = _objectWithoutPropertiesLoose6(_ref, _excluded5);
  const Transition2 = transition;
  return import_react24.default.createElement(Transition2, _extends5({}, props, {
    in: open,
    dropUp,
    timeout: void 0,
    className: (0, import_classnames6.default)("rw-popup-container", className)
  }), import_react24.default.createElement("div", {
    id,
    className: "rw-popup",
    ref,
    role
  }, import_react24.default.createElement(StaticContainer, {
    shouldUpdate: open
  }, children)));
});
Popup.displayName = "Popup";
var Popup_default = Popup;

// ../node_modules/react-widgets/esm/InputAddon.js
var import_classnames8 = __toESM(require_classnames());
var import_react25 = __toESM(require_react());

// ../node_modules/react-widgets/esm/Button.js
var import_classnames7 = __toESM(require_classnames());
var React13 = __toESM(require_react());
var _excluded6 = ["className", "disabled", "label", "icon", "busy", "children", "spinner"];
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function Button(_ref) {
  let {
    className,
    disabled: disabled2,
    label,
    icon,
    busy,
    children,
    spinner = Spinner
  } = _ref, props = _objectWithoutPropertiesLoose7(_ref, _excluded6);
  return React13.createElement("button", _extends6({
    tabIndex: -1
  }, props, {
    title: label,
    type: "button",
    disabled: disabled2,
    "aria-label": label,
    "aria-disabled": disabled2,
    className: (0, import_classnames7.default)(className, "rw-btn")
  }), busy ? spinner : icon, children);
}
var Button_default = Button;

// ../node_modules/react-widgets/esm/InputAddon.js
var _excluded7 = ["className"];
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function InputAddon(_ref) {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose8(_ref, _excluded7);
  return import_react25.default.createElement(Button_default, _extends7({}, props, {
    className: (0, import_classnames8.default)(className, "rw-input-addon rw-picker-btn")
  }));
}
var InputAddon_default = InputAddon;

// ../node_modules/react-widgets/esm/Widget.js
var import_classnames9 = __toESM(require_classnames());
var import_react28 = __toESM(require_react());

// ../node_modules/@restart/hooks/esm/useEventListener.js
var import_react26 = __toESM(require_react());
function useEventListener(eventTarget, event, listener, capture = false) {
  const handler = useEventCallback(listener);
  (0, import_react26.useEffect)(() => {
    const target = typeof eventTarget === "function" ? eventTarget() : eventTarget;
    target.addEventListener(event, handler, capture);
    return () => target.removeEventListener(event, handler, capture);
  }, [eventTarget]);
}

// ../node_modules/@restart/hooks/esm/useGlobalListener.js
var import_react27 = __toESM(require_react());
function useGlobalListener(event, handler, capture = false) {
  const documentTarget = (0, import_react27.useCallback)(() => document, []);
  return useEventListener(documentTarget, event, handler, capture);
}

// ../node_modules/react-widgets/esm/Widget.js
var _excluded8 = ["className", "tabIndex", "focused", "open", "dropUp", "disabled", "readOnly", "autofilling"];
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useKeyboardNavigationCheck() {
  const [isNavigatingViaKeyboard, setIsNavigatingViaKeyboard] = (0, import_react28.useState)(false);
  useGlobalListener("keydown", ({
    key
  }) => {
    if (key == " " || key === "Tab" || key == "Enter" || key && key.indexOf("Arrow") !== -1) {
      setIsNavigatingViaKeyboard(true);
    }
  });
  useGlobalListener("mousedown", () => {
    setIsNavigatingViaKeyboard(false);
  });
  return isNavigatingViaKeyboard;
}
function useWidgetProps(props) {
  const tabIndex = props.tabIndex != null ? props.tabIndex : -1;
  const isKeyboardNavigating = useKeyboardNavigationCheck();
  return {
    tabIndex,
    "data-intent": isKeyboardNavigating ? "keyboard" : "mouse",
    className: (0, import_classnames9.default)(props.className, "rw-widget", props.disabled && "rw-state-disabled", props.readOnly && "rw-state-readonly", props.focused && "rw-state-focus", props.autofilling && "rw-webkit-autofill", props.open && `rw-open${props.dropUp ? "-up" : ""}`)
  };
}
var Widget = import_react28.default.forwardRef((_ref, ref) => {
  let {
    className,
    tabIndex,
    focused,
    open,
    dropUp,
    disabled: disabled2,
    readOnly,
    autofilling
  } = _ref, props = _objectWithoutPropertiesLoose9(_ref, _excluded8);
  const widgetProps = useWidgetProps({
    className,
    tabIndex,
    focused,
    open,
    dropUp,
    disabled: disabled2,
    readOnly,
    autofilling
  });
  return import_react28.default.createElement("div", _extends8({
    ref
  }, props, widgetProps));
});
Widget.displayName = "Widget";
var Widget_default = Widget;

// ../node_modules/react-widgets/esm/WidgetPicker.js
var import_classnames10 = __toESM(require_classnames());
var import_react29 = __toESM(require_react());
var _excluded9 = ["className"];
function _extends9() {
  _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function WidgetPicker(_ref) {
  let {
    className
  } = _ref, props = _objectWithoutPropertiesLoose10(_ref, _excluded9);
  return import_react29.default.createElement("div", _extends9({}, props, {
    className: (0, import_classnames10.default)(className, "rw-widget-picker", "rw-widget-container")
  }));
}
var WidgetPicker_default = WidgetPicker;

// ../node_modules/react-widgets/esm/A11y.js
var import_react30 = __toESM(require_react());
var setActiveDescendant = (ref, activeId) => {
  if (!ref)
    return;
  ref.removeAttribute("aria-activedescendant");
  if (activeId)
    ref.setAttribute("aria-activedescendant", activeId);
};
var useActiveDescendant = (ref, id, visible, deps) => {
  (0, import_react30.useEffect)(() => {
    setActiveDescendant(ref.current, visible ? id : "");
  }, [ref, id, visible, ...deps]);
};

// ../node_modules/react-widgets/esm/Accessors.js
var import_react31 = __toESM(require_react());
var dataValue = (dataItem2, field) => {
  if (typeof field === "function")
    return field(dataItem2);
  if (dataItem2 == null)
    return dataItem2;
  if (typeof field === "string" && typeof dataItem2 === "object" && field in dataItem2)
    return dataItem2[field];
  return dataItem2;
};
var dataText = (dataItem2, textField) => {
  const value = dataValue(dataItem2, textField);
  return value == null ? "" : String(value);
};
function valueMatcher(a, b, dataKey) {
  return dataValue(a, dataKey) === dataValue(b, dataKey);
}
function dataIndexOf(data, value, dataKey) {
  const valueDataKey = dataValue(value, dataKey);
  let idx = -1;
  while (++idx < data.length) {
    const datum = data[idx];
    if (datum === value || dataValue(datum, dataKey) === valueDataKey)
      return idx;
  }
  return -1;
}
function dataItem(data, value, dataKey) {
  const idx = dataIndexOf(data, value, dataKey);
  return idx !== -1 ? data[idx] : value;
}
var useAccessors = (textField, dataKey) => {
  return (0, import_react31.useMemo)(() => ({
    text: (item) => dataText(item, textField),
    value: (item) => dataValue(item, dataKey),
    indexOf: (data, value) => dataIndexOf(data, value, dataKey),
    matches: (a, b) => valueMatcher(a, b, dataKey),
    findOrSelf: (data, value) => dataItem(data, value, dataKey),
    includes: (data, value) => dataIndexOf(data, value, dataKey) !== -1
  }), [textField, dataKey]);
};

// ../node_modules/react-widgets/esm/Filter.js
var import_react32 = __toESM(require_react());
var presets = {
  eq: (a, b) => a === b,
  contains: (a, b) => a.indexOf(b) !== -1,
  startsWith: (a, b) => a.lastIndexOf(b, 0) === 0
};
function normalizeFilter(filter, textField) {
  if (filter === false)
    return null;
  if (typeof filter === "function")
    return filter;
  const filterPreset = presets[filter === true ? "startsWith" : filter || "eq"];
  return (item, searchTerm) => {
    let textValue = dataText(item, textField);
    return filterPreset(textValue.toLowerCase(), searchTerm.toLowerCase());
  };
}
function useFilteredData(data, filterer, searchTerm = "", textAccessor) {
  return (0, import_react32.useMemo)(() => {
    const filter = normalizeFilter(filterer, textAccessor);
    if (!filter || !searchTerm.trim())
      return data;
    return data.filter((item, idx) => filter(item, searchTerm, idx));
  }, [data, filterer, searchTerm, textAccessor]);
}

// ../node_modules/react-widgets/esm/useDropdownToggle.js
function useDropdownToggle(isOpen, onToggle) {
  function open() {
    if (!isOpen)
      notify(onToggle, [true]);
  }
  function close() {
    if (isOpen)
      notify(onToggle, [false]);
  }
  function toggle() {
    if (isOpen)
      close();
    else
      open();
  }
  toggle.open = open;
  toggle.close = close;
  return toggle;
}

// ../node_modules/react-widgets/esm/useFocusManager.js
var import_react34 = __toESM(require_react());

// ../node_modules/@restart/hooks/esm/useFocusManager.js
var import_react33 = __toESM(require_react());
function useFocusManager(opts) {
  const isMounted = useMounted();
  const lastFocused = (0, import_react33.useRef)();
  const handle = (0, import_react33.useRef)();
  const willHandle = useEventCallback(opts.willHandle);
  const didHandle = useEventCallback(opts.didHandle);
  const onChange = useEventCallback(opts.onChange);
  const isDisabled = useEventCallback(opts.isDisabled);
  const handleChange = (0, import_react33.useCallback)((focused, event) => {
    if (focused !== lastFocused.current) {
      didHandle == null ? void 0 : didHandle(focused, event);
      if (isMounted() || !focused) {
        lastFocused.current = focused;
        onChange == null ? void 0 : onChange(focused, event);
      }
    }
  }, [isMounted, didHandle, onChange, lastFocused]);
  const handleFocusChange = (0, import_react33.useCallback)((focused, event) => {
    if (isDisabled())
      return;
    if (event && event.persist)
      event.persist();
    if ((willHandle == null ? void 0 : willHandle(focused, event)) === false) {
      return;
    }
    clearTimeout(handle.current);
    if (focused) {
      handleChange(focused, event);
    } else {
      handle.current = window.setTimeout(() => handleChange(focused, event));
    }
  }, [willHandle, handleChange]);
  return (0, import_react33.useMemo)(() => ({
    onBlur: (event) => {
      handleFocusChange(false, event);
    },
    onFocus: (event) => {
      handleFocusChange(true, event);
    }
  }), [handleFocusChange]);
}

// ../node_modules/dom-helpers/esm/matches.js
var matchesImpl;
function matches(node3, selector) {
  if (!matchesImpl) {
    var body = document.body;
    var nativeMatch = body.matches || body.matchesSelector || body.webkitMatchesSelector || body.mozMatchesSelector || body.msMatchesSelector;
    matchesImpl = function matchesImpl2(n, s) {
      return nativeMatch.call(n, s);
    };
  }
  return matchesImpl(node3, selector);
}

// ../node_modules/react-widgets/esm/useFocusManager.js
var isInDisabledFieldset = (node3) => {
  return !!node3 && matches(node3, "fieldset[disabled] *");
};
function useFocusManager2(ref, props = {}, opts = {}) {
  const isMounted = useMounted();
  const [focused, setFocus] = (0, import_react34.useState)(false);
  const isDisabled = useEventCallback(() => props.disabled === true || isInDisabledFieldset(ref.current));
  const events = useFocusManager(Object.assign({}, opts, {
    isDisabled,
    onChange: (focused2) => {
      if (isMounted())
        setFocus(focused2);
    },
    didHandle(focused2, event) {
      let handler = props[focused2 ? "onFocus" : "onBlur"];
      if (handler)
        handler(event);
      if (opts.didHandle && !event.isWidgetDefaultPrevented)
        opts.didHandle(focused2, event);
    }
  }));
  return [events, focused, setFocus];
}

// ../node_modules/react-widgets/esm/Combobox.js
var _excluded10 = ["id", "className", "containerClassName", "placeholder", "autoFocus", "textField", "dataKey", "autoSelectMatches", "focusFirstItem", "value", "defaultValue", "onChange", "open", "defaultOpen", "onToggle", "filter", "busy", "disabled", "readOnly", "selectIcon", "hideCaret", "hideEmptyPopup", "busySpinner", "dropUp", "tabIndex", "popupTransition", "name", "onSelect", "onKeyDown", "onBlur", "onFocus", "inputProps", "listProps", "popupProps", "groupBy", "renderListItem", "renderListGroup", "optionComponent", "listComponent", "popupComponent", "data", "messages"];
function _extends10() {
  _extends10 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
function _objectWithoutPropertiesLoose11(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function indexOf(data, searchTerm, text) {
  if (!searchTerm.trim())
    return -1;
  for (let idx = 0; idx < data.length; idx++)
    if (text(data[idx]).toLowerCase() === searchTerm)
      return idx;
  return -1;
}
var propTypes4 = {
  value: PropTypes9.any,
  onChange: PropTypes9.func,
  open: PropTypes9.bool,
  onToggle: PropTypes9.func,
  renderListItem: PropTypes9.func,
  listComponent: PropTypes9.elementType,
  renderListGroup: PropTypes9.func,
  groupBy: accessor,
  data: PropTypes9.array,
  dataKey: accessor,
  textField: accessor,
  name: PropTypes9.string,
  /** Do not show the auto complete list when it returns no results. */
  hideEmptyPopup: PropTypes9.bool,
  /** Hide the combobox dropdown indicator. */
  hideCaret: PropTypes9.bool,
  /**
   *
   * @type {(dataItem: ?any, metadata: { originalEvent: SyntheticEvent }) => void}
   */
  onSelect: PropTypes9.func,
  autoFocus: PropTypes9.bool,
  disabled: disabled.acceptsArray,
  readOnly: disabled,
  busy: PropTypes9.bool,
  /** Specify the element used to render the select (down arrow) icon. */
  selectIcon: PropTypes9.node,
  /** Specify the element used to render the busy indicator */
  busySpinner: PropTypes9.node,
  dropUp: PropTypes9.bool,
  popupTransition: PropTypes9.elementType,
  placeholder: PropTypes9.string,
  /** Adds a css class to the input container element. */
  containerClassName: PropTypes9.string,
  inputProps: PropTypes9.object,
  listProps: PropTypes9.object,
  messages: PropTypes9.shape({
    openCombobox: message,
    emptyList: message,
    emptyFilter: message
  })
};
var ComboboxImpl = React17.forwardRef(function Combobox(_ref, outerRef) {
  let {
    id,
    className,
    containerClassName,
    placeholder,
    autoFocus,
    textField,
    dataKey,
    autoSelectMatches,
    focusFirstItem = false,
    value,
    defaultValue = "",
    onChange,
    open,
    defaultOpen = false,
    onToggle,
    filter = true,
    busy,
    disabled: disabled2,
    readOnly,
    selectIcon = caretDown,
    hideCaret,
    hideEmptyPopup,
    busySpinner,
    dropUp,
    tabIndex,
    popupTransition,
    name,
    onSelect,
    onKeyDown,
    onBlur,
    onFocus,
    inputProps,
    listProps,
    popupProps,
    groupBy,
    renderListItem,
    renderListGroup,
    optionComponent,
    listComponent: ListComponent = List_default,
    popupComponent: Popup2 = Popup_default,
    data: rawData = [],
    messages: userMessages
  } = _ref, elementProps = _objectWithoutPropertiesLoose11(_ref, _excluded10);
  let [currentValue, handleChange] = useUncontrolledProp(value, defaultValue, onChange);
  const [currentOpen, handleOpen] = useUncontrolledProp(open, defaultOpen, onToggle);
  const ref = (0, import_react35.useRef)(null);
  const inputRef = (0, import_react35.useRef)(null);
  const listRef = (0, import_react35.useRef)(null);
  const [suggestion, setSuggestion] = (0, import_react35.useState)(null);
  const shouldFilter = (0, import_react35.useRef)(false);
  const inputId = useInstanceId(id, "_input");
  const listId = useInstanceId(id, "_listbox");
  const activeId = useInstanceId(id, "_listbox_active_option");
  const accessors = useAccessors(textField, dataKey);
  const messages2 = useMessagesWithDefaults(userMessages);
  const toggle = useDropdownToggle(currentOpen, handleOpen);
  const isDisabled = disabled2 === true;
  const isReadOnly = !!readOnly;
  const data = useFilteredData(rawData, filter, shouldFilter.current ? accessors.text(currentValue) : void 0, accessors.text);
  const selectedItem = (0, import_react35.useMemo)(() => data[accessors.indexOf(data, currentValue)], [data, currentValue, accessors]);
  const list = useFocusList({
    activeId,
    scope: ref,
    focusFirstItem,
    anchorItem: currentOpen ? selectedItem : void 0
  });
  const [focusEvents, focused] = useFocusManager2(ref, {
    disabled: isDisabled,
    onBlur,
    onFocus
  }, {
    didHandle(focused2) {
      if (!focused2) {
        shouldFilter.current = false;
        toggle.close();
        setSuggestion(null);
        list.focus(void 0);
      } else {
        focus({
          preventScroll: true
        });
      }
    }
  });
  useActiveDescendant(ref, activeId, currentOpen, [list.getFocused()]);
  const handleClick = (e) => {
    if (readOnly || isDisabled)
      return;
    e.preventDefault();
    focus();
    toggle();
  };
  const handleSelect = (data2, originalEvent) => {
    toggle.close();
    shouldFilter.current = false;
    setSuggestion(null);
    notify(onSelect, [data2, {
      originalEvent
    }]);
    change(data2, originalEvent, true);
    focus({
      preventScroll: true
    });
  };
  const handleInputKeyDown = ({
    key
  }) => {
    if (key === "Backspace" || key === "Delete") {
      list.focus(null);
    }
  };
  const handleInputChange = (event) => {
    let idx = autoSelectMatches ? indexOf(rawData, event.target.value.toLowerCase(), accessors.text) : -1;
    shouldFilter.current = true;
    setSuggestion(null);
    const nextValue = idx === -1 ? event.target.value : rawData[idx];
    change(nextValue, event);
    if (!nextValue)
      toggle.close();
    else
      toggle.open();
  };
  const handleKeyDown = (e) => {
    if (readOnly)
      return;
    let {
      key,
      altKey,
      shiftKey
    } = e;
    notify(onKeyDown, [e]);
    if (e.defaultPrevented)
      return;
    const select = (item) => item != null && handleSelect(item, e);
    const setFocused = (el) => {
      if (!el)
        return;
      setSuggestion(list.toDataItem(el));
      list.focus(el);
    };
    if (key === "End" && currentOpen && !shiftKey) {
      e.preventDefault();
      setFocused(list.last());
    } else if (key === "Home" && currentOpen && !shiftKey) {
      e.preventDefault();
      setFocused(list.first());
    } else if (key === "Escape" && currentOpen) {
      e.preventDefault();
      setSuggestion(null);
      toggle.close();
    } else if (key === "Enter" && currentOpen) {
      e.preventDefault();
      select(list.getFocused());
    } else if (key === "ArrowDown") {
      e.preventDefault();
      if (currentOpen) {
        setFocused(list.next());
      } else {
        return toggle.open();
      }
    } else if (key === "ArrowUp") {
      e.preventDefault();
      if (altKey)
        return toggle.close();
      if (currentOpen) {
        setFocused(list.prev());
      }
    }
  };
  function focus(opts) {
    if (inputRef.current)
      inputRef.current.focus(opts);
  }
  function change(nextValue, originalEvent, selected = false) {
    handleChange(nextValue, {
      lastValue: currentValue,
      originalEvent,
      source: selected ? "listbox" : "input"
    });
  }
  (0, import_react35.useImperativeHandle)(outerRef, () => ({
    focus
  }));
  let shouldRenderPopup = useFirstFocusedRender(focused, currentOpen);
  let valueItem = accessors.findOrSelf(data, currentValue);
  let inputValue = accessors.text(suggestion || valueItem);
  let completeType = filter ? "list" : "none";
  let popupOpen = currentOpen && (!hideEmptyPopup || !!data.length);
  let inputReadOnly = (
    // @ts-ignore
    (inputProps == null ? void 0 : inputProps.readOnly) != null ? inputProps == null ? void 0 : inputProps.readOnly : readOnly
  );
  let inputAddon = false;
  if (!hideCaret) {
    inputAddon = React17.createElement(InputAddon_default, {
      busy,
      icon: selectIcon,
      spinner: busySpinner,
      onClick: handleClick,
      disabled: !!isDisabled || isReadOnly,
      label: messages2.openCombobox()
    });
  } else if (busy) {
    inputAddon = React17.createElement("span", {
      "aria-hidden": "true",
      className: "rw-btn rw-picker-caret"
    }, busySpinner || Spinner);
  }
  return React17.createElement(Widget_default, _extends10({}, elementProps, {
    ref,
    open: currentOpen,
    dropUp,
    focused,
    disabled: isDisabled,
    readOnly: isReadOnly
  }, focusEvents, {
    onKeyDown: handleKeyDown,
    className: (0, import_classnames11.default)(className, "rw-combobox")
  }), React17.createElement(WidgetPicker_default, {
    className: (0, import_classnames11.default)(containerClassName, hideCaret && "rw-widget-input", hideCaret && !busy && "rw-hide-caret")
  }, React17.createElement(Input_default, _extends10({}, inputProps, {
    role: "combobox",
    name,
    id: inputId,
    className: (0, import_classnames11.default)(
      // @ts-ignore
      inputProps && inputProps.className,
      "rw-combobox-input",
      !hideCaret && "rw-widget-input"
    ),
    autoFocus,
    tabIndex,
    disabled: isDisabled,
    readOnly: inputReadOnly,
    "aria-busy": !!busy,
    "aria-owns": listId,
    "aria-autocomplete": completeType,
    "aria-expanded": currentOpen,
    "aria-haspopup": true,
    placeholder,
    value: inputValue,
    onChange: handleInputChange,
    onKeyDown: handleInputKeyDown,
    ref: inputRef
  })), inputAddon), React17.createElement(FocusListContext.Provider, {
    value: list.context
  }, shouldRenderPopup && React17.createElement(Popup2, _extends10({}, popupProps, {
    dropUp,
    open: popupOpen,
    transition: popupTransition,
    onEntering: () => listRef.current.scrollIntoView()
  }), React17.createElement(ListComponent, _extends10({}, listProps, {
    id: listId,
    tabIndex: -1,
    data,
    groupBy,
    disabled: disabled2,
    accessors,
    renderItem: renderListItem,
    renderGroup: renderListGroup,
    optionComponent,
    value: selectedItem,
    searchTerm: valueItem && accessors.text(valueItem) || "",
    "aria-hidden": !popupOpen,
    "aria-labelledby": inputId,
    "aria-live": popupOpen ? "polite" : void 0,
    onChange: (d, meta) => handleSelect(d, meta.originalEvent),
    ref: listRef,
    messages: {
      emptyList: rawData.length ? messages2.emptyFilter : messages2.emptyList
    }
  })))));
});
ComboboxImpl.displayName = "Combobox";
ComboboxImpl.propTypes = propTypes4;
var Combobox_default = ComboboxImpl;
export {
  Combobox_default as default
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-widgets/esm/Icon.js:
  (*!
  Font Awesome Free 5.2.0 by @fontawesome - https://fontawesome.com
  License - https://fontawesome.com/license (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
  *)
*/
//# sourceMappingURL=react-widgets_Combobox.js.map
